var K=Object.defineProperty;var v=(i,e,n)=>e in i?K(i,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):i[e]=n;var w=(i,e,n)=>v(i,typeof e!="symbol"?e+"":e,n);import{i as S,a as A,b as R,R as k,S as f,e as H,l as B,w as y}from"./index-CTsVC7zp.js";class L{static evaluateHand(e,n,c=!1,r){let t=0;const u=e.filter(o=>S(o,n)),g=e.some(o=>A(o,n)),h=e.some(o=>R(o,n));g&&(t+=20),h&&(t+=15),u.forEach(o=>{!A(o,n)&&!R(o,n)&&(o.rank===k.Ace?t+=12:o.rank===k.King?t+=8:o.rank===k.Queen?t+=5:o.rank===k.Ten?t+=3:o.rank===k.Nine&&(t+=2))});const s=e.filter(o=>!S(o,n)&&o.rank===k.Ace);t+=s.length*8;const a=e.filter(o=>!S(o,n)&&o.rank===k.King);t+=a.length*3,u.length>=3&&(t+=10),u.length>=4&&(t+=15),c&&r&&(A(r,n)?t+=10:R(r,n)?t+=8:r.rank===k.Ace&&S(r,n)&&(t+=6));const l=this.countSuits(e,n),C=Object.values(l).filter(o=>o===0).length,d=Object.values(l).filter(o=>o===1).length;return u.length>=2?t+=C*3:t-=C*5,t-=d*2,Math.min(100,Math.max(0,t))}static evaluateLoneHand(e,n){if(this.evaluateHand(e,n)<70)return!1;const r=e.some(g=>A(g,n)),t=e.some(g=>R(g,n)),u=e.filter(g=>S(g,n)).length;return!!(r&&t&&u>=3||r&&u>=4)}static countSuits(e,n){const c={[f.Hearts]:0,[f.Diamonds]:0,[f.Spades]:0,[f.Clubs]:0};return e.forEach(r=>{const t=H(r,n);c[t]++}),c}static shouldOrderUp(e,n,c,r){const t=n.suit,u=c===0,g=c===2,h=this.evaluateHand(e,t,u,n),s=this.evaluateLoneHand(u?[...e,n]:e,t);return g?s?{orderUp:!0,goAlone:!0}:{orderUp:h>=45,goAlone:!1}:u?s?{orderUp:!0,goAlone:!0}:{orderUp:h>=35,goAlone:!1}:s?{orderUp:!0,goAlone:!0}:{orderUp:h>=40,goAlone:!1}}static chooseTrump(e,n,c){const r=[f.Hearts,f.Diamonds,f.Spades,f.Clubs].filter(s=>s!==n);let t=null,u=0,g=!1;for(const s of r){const a=this.evaluateHand(e,s);a>u&&(u=a,t=s,g=this.evaluateLoneHand(e,s))}return c===0&&t?{suit:t,goAlone:g}:u>=38?{suit:t,goAlone:g}:{suit:null,goAlone:!1}}}class T{constructor(){w(this,"playedCards");w(this,"allCards");this.playedCards=new Set,this.allCards=new Set;const e=[f.Hearts,f.Diamonds,f.Spades,f.Clubs],n=[k.Nine,k.Ten,k.Jack,k.Queen,k.King,k.Ace];for(const c of e)for(const r of n)this.allCards.add(this.cardKey({suit:c,rank:r}))}cardKey(e){return`${e.suit}-${e.rank}`}addPlayedCard(e){this.playedCards.add(this.cardKey(e))}addPlayedCards(e){e.forEach(n=>this.addPlayedCard(n))}hasBeenPlayed(e){return this.playedCards.has(this.cardKey(e))}getRemainingCards(){const e=[];return this.allCards.forEach(n=>{if(!this.playedCards.has(n)){const[c,r]=n.split("-");e.push({suit:c,rank:parseInt(r)})}}),e}getRemainingInSuit(e,n){return this.getRemainingCards().filter(c=>H(c,n)===e)}getSuitCounts(e){const n={[f.Hearts]:0,[f.Diamonds]:0,[f.Spades]:0,[f.Clubs]:0};return this.getRemainingCards().forEach(c=>{const r=H(c,e);n[r]++}),n}isLikelyVoid(e,n){return this.getRemainingInSuit(e,n).length<=2}getHighestRemaining(e,n){const c=this.getRemainingInSuit(e,n);return c.length===0?null:c.sort((r,t)=>{if(S(r,n)&&S(t,n)){const u=r.suit===n&&r.rank===k.Jack,g=t.suit===n&&t.rank===k.Jack;if(u)return 1;if(g)return-1;const h=r.suit!==n&&r.rank===k.Jack,s=t.suit!==n&&t.rank===k.Jack;if(h)return 1;if(s)return-1}return t.rank-r.rank})[0]}reset(){this.playedCards.clear()}getPlayedCount(){return this.playedCards.size}}function W(i,e,n,c,r){if(r==="Casual"){const u=i.filter(s=>H(s,e.suit)===e.suit).length,g=i.some(s=>A(s,e.suit)),h=i.some(s=>R(s,e.suit));return g||h&&u>=3?{action:"order",goAlone:!1}:u>=3?{action:"order",goAlone:!1}:{action:"pass",goAlone:!1}}const t=L.shouldOrderUp(i,e,n,c);return r==="Shark"&&t.orderUp&&!t.goAlone&&L.evaluateHand(i,e.suit,n===0,e)>=60&&(t.goAlone=!0),{action:t.orderUp?"order":"pass",goAlone:t.goAlone}}function J(i,e,n,c,r){if(r==="Casual"){const u=[f.Hearts,f.Diamonds,f.Spades,f.Clubs].filter(s=>s!==e);let g=u[0],h=0;for(const s of u){const a=i.filter(l=>H(l,s)===s).length;a>h&&(h=a,g=s)}return h>=3?{suit:g,goAlone:!1}:{suit:null,goAlone:!1}}const t=L.chooseTrump(i,e,n);return r==="Shark"&&t.suit&&!t.goAlone&&L.evaluateHand(i,t.suit)>=55&&(t.goAlone=!0),t}function _(i,e,n,c,r,t){const u=e.length?H(e[0],n):null,g=B(i,u,n);if(t==="Casual"){if(e.length===0){const h=g.filter(s=>!S(s,n));if(h.length>0)return h.reduce((s,a)=>a.rank>s.rank?a:s)}return g[0]}if(e.length===0){const h=c!==null&&r.length<8;return U(g,n,r,t==="Shark",h)}return E(g,e,n,c,r,t==="Shark")}function U(i,e,n,c,r=!1){new T().addPlayedCards([...n]);const u=i.find(s=>A(s,e));if(u&&n.length>=12)return u;const g=i.filter(s=>S(s,e));if(g.length>0&&r){const s=g.reduce((a,l)=>A(l,e)||R(l,e)?a:A(a,e)||R(a,e)||l.rank<a.rank?l:a);if(!A(s,e)&&!R(s,e))return s}if(c){const s={[f.Hearts]:[],[f.Diamonds]:[],[f.Spades]:[],[f.Clubs]:[]};i.forEach(l=>{S(l,e)||s[l.suit].push(l)}),Object.entries(s).filter(([l,C])=>C.length===0).map(([l])=>l);const a=Object.entries(s).filter(([l,C])=>C.length===1).map(([l,C])=>({suit:l,card:C[0]}));if(a.length>0)return a[0].card}const h=i.filter(s=>!S(s,e));if(h.length>0){const s=h.filter(d=>d.rank>=k.King);if(s.length>0)return s[0];const a={[f.Hearts]:0,[f.Diamonds]:0,[f.Spades]:0,[f.Clubs]:0};h.forEach(d=>{a[d.suit]++});const l=Object.entries(a).reduce((d,[o,b])=>b>d.count?{suit:o,count:b}:d,{suit:f.Hearts,count:0}).suit,C=h.filter(d=>d.suit===l);if(C.length>0)return C[0]}return i[0]}function E(i,e,n,c,r,t){const u=new T;u.addPlayedCards([...r]);const g=y(e,n);if(c!==null&&e.length===2&&g===0){const a=H(e[0],n);if(!i.some(C=>H(C,n)===a)&&t){const C={[f.Hearts]:[],[f.Diamonds]:[],[f.Spades]:[],[f.Clubs]:[]};i.forEach(o=>{S(o,n)||C[o.suit].push(o)});const d=Object.entries(C).sort(([o,b],[P,I])=>I.length-b.length)[0];if(d&&d[1].length>0)return d[1].reduce((o,b)=>b.rank<o.rank?b:o)}return i.reduce((C,d)=>D(d,n)<D(C,n)?d:C)}const s=i.filter(a=>{const l=[...e,a];return y(l,n)===l.length-1});if(s.length>0){if(t&&e.length===3){const a=H(e[0],n);if(u.getRemainingInSuit(a,n).filter(d=>!i.some(o=>o.suit===d.suit&&o.rank===d.rank)).filter(d=>d.rank>=k.King).length>0){const d=s.filter(o=>o.rank>=k.Queen);if(d.length>0)return d[0]}}return s.reduce((a,l)=>D(l,n)<D(a,n)?l:a)}return i.reduce((a,l)=>D(l,n)<D(a,n)?l:a)}function D(i,e){return A(i,e)?1e3:R(i,e)?900:S(i,e)?100+(20-i.rank):i.rank===k.Ace?80:i.rank===k.King?70:20-i.rank}export{W as pickBidRound1,J as pickBidRound2,_ as pickCardToPlay};
